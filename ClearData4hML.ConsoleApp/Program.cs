// This file was auto-generated by ML.NET Model Builder. 

using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using ClearData4hML.Model;
using CsvHelper;

namespace ClearData4hML.ConsoleApp
{
    public class input
    {
        public string gamecategory { get; set; }
        public string subgamecategory { get; set; }
        public string bundle { get; set; }
        public string created { get; set; }
        public string shift { get; set; }
        public string oblast { get; set; }
        public string city { get; set; }
        public string os { get; set; }
        public string osv { get; set; }
    }
    public class output
    {
        public string Segment { get; set; }
        public string gamecategory { get; set; }
        public string subgamecategory { get; set; }
        public string bundle { get; set; }
        public string created { get; set; }
        public string shift { get; set; }
        public string oblast { get; set; }
        public string city { get; set; }
        public string os { get; set; }
        public string osv { get; set; }
    }

    public static class Program
    {
        static public void Main(string[] args)
        {
            /*
             * 
             * Пример работы с моделью
            // Create single instance of sample data from first line of dataset for model input
            ModelInput sampleData = new ModelInput()
            {
                Gamecategory = @"Games",
                Subgamecategory = @"Racing",
                Bundle = @"com.MadOut.BIG",
                Created = @"2021-07-05 18:07:40",
                Shift = @"MSK+6",
                Oblast = @"Забайкальский Край",
                City = @"Чита",
                Os = @"android",
                Osv = @"10.0",
            };

            // Make a single prediction on the sample data and print results
            var predictionResult = ConsumeModel.Predict(sampleData);

            Console.WriteLine("Using model to make single prediction -- Comparing actual Segment with predicted Segment from sample data...\n\n");
            Console.WriteLine($"Gamecategory: {sampleData.Gamecategory}");
            Console.WriteLine($"Subgamecategory: {sampleData.Subgamecategory}");
            Console.WriteLine($"Bundle: {sampleData.Bundle}");
            Console.WriteLine($"Created: {sampleData.Created}");
            Console.WriteLine($"Shift: {sampleData.Shift}");
            Console.WriteLine($"Oblast: {sampleData.Oblast}");
            Console.WriteLine($"City: {sampleData.City}");
            Console.WriteLine($"Os: {sampleData.Os}");
            Console.WriteLine($"Osv: {sampleData.Osv}");
            Console.WriteLine($"\n\nPredicted Segment value {predictionResult.Prediction} \nPredicted Segment scores: [{String.Join(",", predictionResult.Score)}]\n\n");
            Console.WriteLine("=============== End of process, hit any key to finish ===============");
            Console.ReadKey();
            */
        }

        static public void predict(string path1, string path2)
        {
            
            List<output> go = new List<output>();

            string inputpath = path1; //сюда ввести путь для 
            string outputpath = path2; // Сюда ввести путь для сохранения результата

            using (var reader = new StreamReader(inputpath))
            using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))
            {
                var records = csv.GetRecords<input>();

                foreach (var record in records)
                {
                    ModelInput Data = new ModelInput()
                    {
                        Gamecategory = record.gamecategory,
                        Subgamecategory = record.subgamecategory,
                        Bundle = record.bundle,
                        Created = record.created,
                        Shift = record.shift,
                        Oblast = record.oblast,
                        City = record.city,
                        Os = record.os,
                        Osv = record.osv,
                    };

                    var Result = ConsumeModel.Predict(Data);

                    go.Add(new output
                    {
                        Segment = Result.Prediction,
                        gamecategory = record.gamecategory,
                        subgamecategory = record.subgamecategory,
                        bundle = record.bundle,
                        created = record.created,
                        shift = record.shift,
                        oblast = record.oblast,
                        city = record.city,
                        os = record.os,
                        osv = record.osv,
                    });
                    
                }
            }

            IEnumerable<output> recordss = go;

            using (var writer = new StreamWriter(outputpath))
            using (var csv = new CsvWriter(writer, CultureInfo.InvariantCulture))
            {
                csv.WriteRecords(recordss);
            }

        }

        static public float test(string path)
        {

            float all = 0;
            float well = 0;
            float bad = 0;

            List<output> go = new List<output>();

            string inputpath = path; //сюда ввести путь для 

            using (var reader = new StreamReader(inputpath))
            using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))
            {
                var records = csv.GetRecords<output>();

                foreach (var record in records)
                {
                    ModelInput Data = new ModelInput()
                    {
                        Gamecategory = record.gamecategory,
                        Subgamecategory = record.subgamecategory,
                        Bundle = record.bundle,
                        Created = record.created,
                        Shift = record.shift,
                        Oblast = record.oblast,
                        City = record.city,
                        Os = record.os,
                        Osv = record.osv,
                    };

                    var Result = ConsumeModel.Predict(Data);

                    all++;
                    if (Result.Prediction == record.Segment)
                    {
                        well++;
                    }
                    else
                    {
                        bad++;
                    }

                }
            }

            Console.WriteLine("All: " + all);
            Console.WriteLine("Well: " + well);
            Console.WriteLine("Bad: " + bad);
            Console.WriteLine("Точность: " + (well * 100) / all);

            return (well * 100) / all;
        }

        static public int calc(string path)
        {
            int result = 0;

            string inputpath = path;

            using (var reader = new StreamReader(inputpath))
            using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))
            {
                var records = csv.GetRecords<input>();

                List<input> rec = records.ToList();

                result = rec.Count;
            }

            return result;
        }
    }

}
